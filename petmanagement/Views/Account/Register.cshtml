@model petmanagement.Models.ViewModels.RegisterViewModel
@{
    ViewData["Title"] = "Register";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <div class="text-center mb-4">
                        <h2 class="fw-bold text-primary">Create Account</h2>
                        <p class="text-muted">Join our pet management community</p>
                    </div>

                    <form asp-action="Register" method="post">
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                        <div class="mb-3">
                            <label asp-for="Name" class="form-label fw-semibold"></label>
                            <input asp-for="Name" class="form-control" placeholder="Enter your full name" />
                            <span asp-validation-for="Name" class="text-danger small"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Email" class="form-label fw-semibold"></label>
                            <input asp-for="Email" class="form-control" placeholder="Enter your email address" />
                            <span asp-validation-for="Email" class="text-danger small"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Password" class="form-label fw-semibold"></label>
                            <input asp-for="Password" class="form-control" placeholder="Create a password" />
                            <span asp-validation-for="Password" class="text-danger small"></span>
                            <div class="form-text">Password must be at least 6 characters long.</div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="ConfirmPassword" class="form-label fw-semibold"></label>
                            <input asp-for="ConfirmPassword" class="form-control" placeholder="Confirm your password" />
                            <span asp-validation-for="ConfirmPassword" class="text-danger small"></span>
                        </div>

                        <div class="mb-4">
                            <div class="form-check">
                                <input asp-for="AgreeToTerms" class="form-check-input" />
                                <label asp-for="AgreeToTerms" class="form-check-label">
                                    I agree to the <a href="#" class="text-primary">Terms and Conditions</a>
                                </label>
                                <div>
                                    <span asp-validation-for="AgreeToTerms" class="text-danger small"></span>
                                </div>
                            </div>
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg">
                                <i class="fas fa-user-plus me-2"></i>Create Account
                            </button>
                        </div>
                    </form>

                    <div class="text-center mt-4">
                        <p class="mb-0">Already have an account? 
                            <a asp-action="Login" class="text-primary fw-semibold text-decoration-none">Sign in here</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        // Add some client-side validation feedback
        document.addEventListener('DOMContentLoaded', function() {
            const passwordInput = document.getElementById('Password');
            const confirmPasswordInput = document.getElementById('ConfirmPassword');
            
            function validatePasswordMatch() {
                if (confirmPasswordInput.value && passwordInput.value !== confirmPasswordInput.value) {
                    confirmPasswordInput.setCustomValidity('Passwords do not match');
                } else {
                    confirmPasswordInput.setCustomValidity('');
                }
            }
            
            if (passwordInput && confirmPasswordInput) {
                passwordInput.addEventListener('input', validatePasswordMatch);
                confirmPasswordInput.addEventListener('input', validatePasswordMatch);
            }
        });
    </script>
}

<style>
    .card {
        border: none;
        border-radius: 15px;
    }
    
    .form-control {
        border-radius: 10px;
        padding: 12px 15px;
        border: 2px solid #e9ecef;
        transition: all 0.3s ease;
    }
    
    .form-control:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
    }
    
    .btn-primary {
        border-radius: 10px;
        padding: 12px;
        font-weight: 600;
        border: none;
        background: linear-gradient(135deg, #0d6efd 0%, #0056b3 100%);
        transition: all 0.3s ease;
    }
    
    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(13, 110, 253, 0.3);
    }
    
    .form-check-input:checked {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }
    
    .text-primary {
        color: #0d6efd !important;
    }
    
    .fw-semibold {
        font-weight: 600;
    }
</style>